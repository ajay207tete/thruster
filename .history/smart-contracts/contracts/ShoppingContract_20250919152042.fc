
import "stdlib.fc";

global int lastOrderId;
global cell orders;
global slice ownerAddress;

() constructor() impure {
    ownerAddress = get_sender_address();
    lastOrderId = 0;
    orders = new_dict();
}

() createOrder(slice productDetails, slice productImage) impure {
    lastOrderId = lastOrderId + 1;
    tuple(slice, slice, int) newOrder = (productDetails, productImage, 0);
    orders = udict_set(orders, 32, lastOrderId, begin_cell().store_slice(newOrder).end_cell());
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    ;; Handle TON payment
    if (msg_value > 0) {
        ;; Assume payment for last order
        cell orderCell = udict_get_ref(orders, 32, lastOrderId);
        if (!cell_null?(orderCell)) {
            slice orderSlice = begin_parse(orderCell);
            slice pd = first(orderSlice);
            slice pi = second(orderSlice);
            int paid = third(orderSlice);
            if (paid == 0) {
                tuple(slice, slice, int) updatedOrder = (pd, pi, 1);
                orders = udict_set(orders, 32, lastOrderId, begin_cell().store_slice(updatedOrder).end_cell());
            }
        }
    }
}

() recv_external(slice in_msg) impure {
    ;; Handle external messages
    int op = in_msg~load_uint(32);
    if (op == 0) {
        ;; Set owner
        ownerAddress = get_sender_address();
    } elseif (op == 1) {
        ;; createOrder
        slice productDetails = in_msg~load_ref().begin_parse();
        slice productImage = in_msg~load_ref().begin_parse();
        createOrder(productDetails, productImage);
    }
}

() withdraw() impure {
    ;; Withdraw funds to owner
    if (get_sender_address() != ownerAddress) {
        throw(101);
    }
    int balance = get_balance();
    if (balance > 0) {
        send_raw_message(begin_cell().store_uint(0x10, 6).store_slice(ownerAddress).store_coins(balance).store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1).end_cell(), 64);
    }
}
